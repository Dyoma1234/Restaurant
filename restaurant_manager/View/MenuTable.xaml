<UserControl x:Class="restaurant_manager.MenuTable"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:restaurant_manager"
             xmlns:domain="clr-namespace:restaurant_manager.domain"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             d:DesignHeight="450" d:DesignWidth="800"
               TextElement.Foreground="{DynamicResource MaterialDesignBody}"
     TextElement.FontWeight="Regular"
     TextElement.FontSize="13"
     TextOptions.TextFormattingMode="Ideal"
     TextOptions.TextRenderingMode="Auto"
     Background="{DynamicResource MaterialDesignPaper}"
     FontFamily="{DynamicResource MaterialDesignFont}" >
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
    </UserControl.Resources>
    <Grid>
        <DataGrid
            x:Name="Table"
  Margin="0 8 0 0"
  ItemsSource="{Binding DishesList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
  SelectedItem="{Binding SelectedItem,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
  SelectionMode="Single"
  CanUserSortColumns="True"
  CanUserAddRows="{Binding AddNewDish, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
  IsReadOnly="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
  AutoGenerateColumns="False"
  materialDesign:DataGridAssist.CellPadding="13 8 8 8"
  materialDesign:DataGridAssist.ColumnHeaderPadding="8">
            
            <DataGrid.Columns>
                <DataGridCheckBoxColumn
                                 Binding="{Binding IsSelected}"
                                     EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}">
                    <DataGridCheckBoxColumn.Header>
                        <!--padding to allow hit test to pass thru for sorting -->
                        <Border
                                     Background="Transparent"
                                     Padding="6 0 6 0"
                                     HorizontalAlignment="Center">
                            <CheckBox
                                         HorizontalAlignment="Center"
                                         DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}"
                                         IsChecked="{Binding IsAllItemsSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                        </Border>
                    </DataGridCheckBoxColumn.Header>
                </DataGridCheckBoxColumn>
                <DataGridTextColumn
                              IsReadOnly="True"
                              Binding="{Binding Id, UpdateSourceTrigger=PropertyChanged}"
                              Header="Номер"
                              EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
                <!-- if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn -->
                <materialDesign:MaterialDataGridTextColumn
                             IsReadOnly="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Binding="{Binding Name , UpdateSourceTrigger=PropertyChanged}"
                             Header="Название"
                             MaxLength="50"
                             EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" />
                <materialDesign:MaterialDataGridComboBoxColumn
                            materialDesign:DataGridAssist.EnableEditBoxAssist="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Header="Категория"
                 SelectedValueBinding="{Binding Dishes_categories , UpdateSourceTrigger=PropertyChanged}"
                 ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.DishesCategoriesList}" 
                 DisplayMemberPath="Name" />
                <!-- set a max length to get an indicator in the editor -->
                <materialDesign:MaterialDataGridTextColumn
                    IsReadOnly="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Binding="{Binding Weight , UpdateSourceTrigger=PropertyChanged}"
                            
                            Header="Вес"
                            MaxLength="50"
                            EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" />
                <materialDesign:MaterialDataGridTextColumn
                             IsReadOnly="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Binding="{Binding Price , UpdateSourceTrigger=PropertyChanged}"
                             Header="Цена"
                             MaxLength="50"
                             EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}">

                </materialDesign:MaterialDataGridTextColumn>
                <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
            </DataGrid.Columns>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="RowEditEnding">
                    <i:InvokeCommandAction Command="{Binding EndEdit}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        
        </DataGrid>
        <Grid Visibility="{Binding Path=NotFound, Converter={StaticResource BoolToVisConverter}}">
            <TextBlock FontSize="72" HorizontalAlignment="Center" VerticalAlignment="Center">Ничего не найдено :(</TextBlock>
        </Grid>
        <Grid Visibility="{Binding Path=TableVisible, Converter={StaticResource BoolToVisConverter}}"  Opacity="0.4" Background="Black"></Grid>
        <materialDesign:TransitioningContent>
            <materialDesign:TransitioningContent.OpeningEffects>
                <materialDesign:TransitionEffect Kind="FadeIn" />
                <materialDesign:TransitionEffect Kind="ExpandIn" />
            </materialDesign:TransitioningContent.OpeningEffects>
            <Grid Visibility="{Binding Path=AddVisible , Converter={StaticResource BoolToVisConverter}}" Width="300" Height="420" Background="White" Margin="50,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="0.6*"/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Background="#FF2196F3">
                    <TextBlock Margin="15,0" Text="Добавление"  

                FontWeight="Bold" TextTrimming="CharacterEllipsis" 

                LineHeight="22" FontSize="16" 

                VerticalAlignment="Center" Foreground="White"/>
                </Grid>
                <TextBox Grid.Row="1" Margin="15,0"  materialDesign:HintAssist.Hint="Название" materialDesign:HintAssist.IsFloating="True"  materialDesign:HintAssist.HintOpacity="0.4" Padding="5,0" VerticalAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="AddNewName" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" ValidationStep="UpdatedValue"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <ComboBox Grid.Row="2" Margin="15,0" materialDesign:HintAssist.Hint="Категория" materialDesign:HintAssist.IsFloating="True"  materialDesign:HintAssist.HintOpacity="0.4" Padding="5,5"   ItemsSource="{ Binding DishesCategoriesList}" 
                 DisplayMemberPath="Name" VerticalAlignment="Center" >
                    <ComboBox.Text>
                        <Binding Path="AddNewCat" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" ValidationStep="UpdatedValue"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </ComboBox.Text>
                </ComboBox>
                <TextBox Grid.Row="3" Margin="15,0"  materialDesign:HintAssist.Hint="Вес" materialDesign:HintAssist.IsFloating="True"  materialDesign:HintAssist.HintOpacity="0.4" Padding="5,0"  PreviewTextInput="AddNewPric_PreviewTextInput" VerticalAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="AddNewWeight" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <domain:NotEmptyValidationRule ValidationStep="UpdatedValue" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <TextBox Grid.Row="4" Margin="15,0"  materialDesign:HintAssist.Hint="Цена" materialDesign:HintAssist.IsFloating="True"  materialDesign:HintAssist.HintOpacity="0.4" Padding="5,0"  PreviewTextInput="AddNewPric_PreviewTextInput" VerticalAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="AddNewPric" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <domain:NotEmptyValidationRule ValidationStep="UpdatedValue" ValidatesOnTargetUpdated="True"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Button Grid.Row="5" Width="100" HorizontalAlignment="Right"  Margin="15,0" Padding="5,0" Command="{Binding CloseAddDishesCommand}">Отмена</Button>
                <Button Grid.Row="5" Width="100" HorizontalAlignment="Left" Margin="15,0" Padding="5,0" Command="{Binding AddDishCommand}">Добавить</Button>

            </Grid>
            
        </materialDesign:TransitioningContent>
       
    </Grid>
</UserControl>
